# -*- coding: utf-8 -*-
"""hackathon.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GaViZdQ0dir7ddWmHvnuMmIkz3Hou2bI
"""



"""# hackathon project

## load data
"""

import pandas as pd

df = pd.read_csv('https://raw.githubusercontent.com/Zenuu19/hackathon/main/transaction_data.csv')
df

"""# data preparation

## data separation as x and y
"""

y = df['AnomalyScore']
y

X = df.drop('AnomalyScore', axis =  1)
X

"""## data splitting"""

from sklearn.model_selection import train_test_split


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=100)

X_train

X_test

"""# model building

## linear regression

### training the model
"""

from sklearn.linear_model import LinearRegression

lr = LinearRegression()
lr.fit(X_train, y_train)

"""### prediction"""

y_lr_train_pred = lr.predict(X_train)
y_lr_test_pred = lr.predict(X_test)

y_lr_train_pred

y_lr_test_pred

"""### evaluate model performance"""

from sklearn.metrics import mean_squared_error, r2_score

lr_train_mse = mean_squared_error(y_train, y_lr_train_pred)
lr_train_r2 = r2_score(y_train, y_lr_train_pred)

lr_test_mse = mean_squared_error(y_test, y_lr_test_pred)
lr_test_r2 = r2_score(y_test, y_lr_test_pred)

print('LR MSE (Train): ', lr_train_mse)
print('LR R2 (Train): ', lr_train_r2)
print('LR MSE (Test): ', lr_test_mse)
print('LR R2 (Test): ', lr_test_r2)

lr_results = pd.DataFrame(['Linear Regression', lr_train_mse, lr_train_r2, lr_test_mse, lr_test_r2]).transpose()
lr_results.columns = ('Method', 'Train MSE', 'Train R2', 'Test MSE', 'Test R2')

lr_results

"""## random forest

### training the model
"""

from sklearn.ensemble import RandomForestRegressor

rf = RandomForestRegressor(max_depth=2, random_state=100)
rf.fit(X_train, y_train)

"""### prediction"""

y_rf_train_pred = rf.predict(X_train)
y_rf_test_pred = rf.predict(X_test)

y_rf_train_pred

y_rf_test_pred

"""### evaluate model performance"""

from sklearn.metrics import mean_squared_error, r2_score

rf_train_mse = mean_squared_error(y_train, y_rf_train_pred)
rf_train_r2 = r2_score(y_train, y_rf_train_pred)

rf_test_mse = mean_squared_error(y_test, y_rf_test_pred)
rf_test_r2 = r2_score(y_test, y_rf_test_pred)

print('RF MSE (Train): ', rf_train_mse)
print('RF R2 (Train): ', rf_train_r2)
print('RF MSE (Test): ', rf_test_mse)
print('RF R2 (Test): ', rf_test_r2)

rf_results = pd.DataFrame(['Random Forest', rf_train_mse, rf_train_r2, rf_test_mse, rf_test_r2]).transpose()
rf_results.columns = ('Method', 'Train MSE', 'Train R2', 'Test MSE', 'Test R2')

rf_results

"""## gradient boosting regression

### training model
"""

from sklearn.ensemble import GradientBoostingRegressor

gbr = GradientBoostingRegressor(max_depth=2, random_state=100)
gbr.fit(X_train, y_train)

"""### prediction"""

y_gbr_train_pred = gbr.predict(X_train)
y_gbr_test_pred = gbr.predict(X_test)

y_gbr_train_pred

y_gbr_test_pred

"""### evaluate model performance"""

from sklearn.metrics import mean_squared_error, r2_score

gbr_train_mse = mean_squared_error(y_train, y_gbr_train_pred)
gbr_train_r2 = r2_score(y_train, y_gbr_train_pred)

gbr_test_mse = mean_squared_error(y_test, y_gbr_test_pred)
gbr_test_r2 = r2_score(y_test, y_gbr_test_pred)

print('GBR MSE (Train): ', gbr_train_mse)
print('GBR R2 (Train): ', gbr_train_r2)
print('GBR MSE (Test): ', gbr_test_mse)
print('GBR R2 (Test): ', gbr_test_r2)

gbr_results = pd.DataFrame(['Gradient Boosting Regression', gbr_train_mse, gbr_train_r2, gbr_test_mse, gbr_test_r2]).transpose()
gbr_results.columns = ('Method', 'Train MSE', 'Train R2', 'Test MSE', 'Test R2')

gbr_results

"""# model comparison"""

df_models = pd.concat([lr_results, rf_results, gbr_results], axis=0)
df_models

df_models.reset_index(drop=True)

"""# data visualisation"""

import matplotlib.pyplot as plt
import numpy as np

plt.figure(figsize=(5,5))
plt.scatter(x=y_train, y=y_lr_train_pred, c="#7CAE00", alpha=0.3)

z = np.polyfit(y_train, y_lr_train_pred,1)
p = np.poly1d(z)

plt.plot(y_train, p(y_train), '#F8766D')
plt.ylabel('Predict AnomalyScore')
plt.xlabel('Experimental AnomalyScore')